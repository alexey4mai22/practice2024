from typing import List

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []

        # Mapping of digits to letters
        digit_to_letters = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }

        def backtrack(index, path):
            # If the path length is equal to the digits length, we have a complete combination
            if len(path) == len(digits):
                combinations.append(''.join(path))
                return

            # Get the letters that the current digit can represent
            possible_letters = digit_to_letters[digits[index]]

            # Go through all the letters and recurse
            for letter in possible_letters:
                path.append(letter)  # Add the letter to the path
                backtrack(index + 1, path)  # Move on to the next digit
                path.pop()  # Backtrack, remove the letter before moving onto the next
        combinations = []
        backtrack(0, [])
        return combinations
